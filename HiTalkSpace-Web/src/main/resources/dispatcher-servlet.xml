<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!--配置注解导入-->
    <context:component-scan base-package="colin.web.hitalkspace.controller"/>
    <!--sop动态配置-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <!-- 以下 validator  ConversionService 在使用 mvc:annotation-driven 会 自动注册-->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties-->
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>

    <!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <!--在web环境中一定要定位到classpath 否则默认到当前web应用下找-->
                <value>classpath:message/error_message</value>
                <!-- <value>classpath:org/hibernate/validator/ValidationMessages</value>-->
            </list>
        </property>
        <property name="useCodeAsDefaultMessage" value="false"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="cacheSeconds" value="60"/>
    </bean>
    <!--Beetl视图解析器 -->
    <bean id="beetlConfig" class="org.beetl.ext.spring.BeetlGroupUtilConfiguration"
          init-method="init"/>
    <bean id="viewResolver" class="org.beetl.ext.spring.BeetlSpringViewResolver"
          p:prefix="WEB-INF/pages/" p:suffix=".html">
        <property name="contentType" value="text/html;charset=UTF-8"/>
        <property name="order" value="1"></property>
    </bean>
    <!--配置请求拦截器-->
    <!-- <mvc:interceptors>
            <mvc:interceptor>
                   <mvc:mapping path="/homework/*.html" />
                   <bean class="colin.web.homework.interceptor.UserAuthorityInteceptor"></bean>
            </mvc:interceptor>
     </mvc:interceptors>-->
    <!--配置统一的错误处理机制,也可以自己重写这个类，通过集成HandlerExceptionResolverAdapter-->
    <!-- <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
          <property name="exceptionMappings">
              <props>
                  <prop key="java.lang.Exception">/server_error</prop>
                  <prop key="java.lang.Throwable">server_theread_error</prop>
              </props>
          </property>
      </bean>-->
    <!--处理JSON请求-->
    <!-- 会自动注册了validator  ConversionService  -->
    <mvc:annotation-driven>
        <!--enableMatrixVariables="true">-->
        <mvc:message-converters register-defaults="true">
            <!-- StringHttpMessageConverter编码为UTF-8，防止乱码 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8"/>
                <property name="supportedMediaTypes">
                    <list>
                        <bean class="org.springframework.http.MediaType">
                            <constructor-arg index="0" value="text"/>
                            <constructor-arg index="1" value="plain"/>
                            <constructor-arg index="2" value="UTF-8"/>
                        </bean>
                        <bean class="org.springframework.http.MediaType">
                            <constructor-arg index="0" value="*"/>
                            <constructor-arg index="1" value="*"/>
                            <constructor-arg index="2" value="UTF-8"/>
                        </bean>
                    </list>
                </property>
            </bean>

            <!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter"
                  id="fastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
                <!--<property name="serializerFeature">-->
                <!--这个地方加上这个功能吧，能自己配置一些东西，比如时间的格式化，null输出""等等-->
                <!--</property>-->
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!--springmvc处理静态资源，默认default-->
    <mvc:default-servlet-handler/>
    <!--静态资源的位置-->
    <mvc:resources mapping="/fonts/**" location="/resources/fonts/"/>
    <mvc:resources mapping="/js/**" location="/resources/js/"/>
    <mvc:resources mapping="/css/**" location="/resources/css/"/>
    <mvc:resources mapping="/img/**" location="/resources/img/"/>
    <mvc:resources mapping="/plugins/**" location="/resources/plugins/"/>
    <mvc:resources mapping="/vendor/**" location="/resources/vendor/"/>
    <!--处理文件上传是所需要的文件 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"></property>
    </bean>
    <!--加载service配置文件-->
</beans>